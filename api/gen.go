//go:build go1.22

// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/oapi-codegen/runtime"
)

// App defines model for App.
type App struct {
	Manifest *map[string]interface{} `json:"manifest,omitempty"`
	Name     string                  `json:"name"`
	Url      string                  `json:"url"`
}

// CommandOutput defines model for CommandOutput.
type CommandOutput struct {
	Code    int    `json:"code"`
	Stderr  string `json:"stderr"`
	Stdout  string `json:"stdout"`
	Success bool   `json:"success"`
}

// GetConsoleLogsParams defines parameters for GetConsoleLogs.
type GetConsoleLogsParams struct {
	// App Filter logs by app
	App *string `form:"app,omitempty" json:"app,omitempty"`
}

// GetCronLogsParams defines parameters for GetCronLogs.
type GetCronLogsParams struct {
	// App Filter logs by app
	App *string `form:"app,omitempty" json:"app,omitempty"`
}

// GetHttpLogsParams defines parameters for GetHttpLogs.
type GetHttpLogsParams struct {
	// Host Filter logs by host
	Host *string `form:"host,omitempty" json:"host,omitempty"`
}

// RunAppJSONBody defines parameters for RunApp.
type RunAppJSONBody struct {
	Args []string `json:"args"`
}

// RunAppJSONRequestBody defines body for RunApp for application/json ContentType.
type RunAppJSONRequestBody RunAppJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /v0/apps)
	GetApps(w http.ResponseWriter, r *http.Request)

	// (GET /v0/apps/{app})
	GetApp(w http.ResponseWriter, r *http.Request, app string)

	// (GET /v0/logs/console)
	GetConsoleLogs(w http.ResponseWriter, r *http.Request, params GetConsoleLogsParams)

	// (GET /v0/logs/cron)
	GetCronLogs(w http.ResponseWriter, r *http.Request, params GetCronLogsParams)

	// (GET /v0/logs/http)
	GetHttpLogs(w http.ResponseWriter, r *http.Request, params GetHttpLogsParams)

	// (POST /v0/run/{app})
	RunApp(w http.ResponseWriter, r *http.Request, app string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GetApps operation middleware
func (siw *ServerInterfaceWrapper) GetApps(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetApps(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetApp operation middleware
func (siw *ServerInterfaceWrapper) GetApp(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "app" -------------
	var app string

	err = runtime.BindStyledParameterWithOptions("simple", "app", r.PathValue("app"), &app, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "app", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetApp(w, r, app)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetConsoleLogs operation middleware
func (siw *ServerInterfaceWrapper) GetConsoleLogs(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetConsoleLogsParams

	// ------------- Optional query parameter "app" -------------

	err = runtime.BindQueryParameter("form", true, false, "app", r.URL.Query(), &params.App)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "app", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetConsoleLogs(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetCronLogs operation middleware
func (siw *ServerInterfaceWrapper) GetCronLogs(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetCronLogsParams

	// ------------- Optional query parameter "app" -------------

	err = runtime.BindQueryParameter("form", true, false, "app", r.URL.Query(), &params.App)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "app", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetCronLogs(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetHttpLogs operation middleware
func (siw *ServerInterfaceWrapper) GetHttpLogs(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetHttpLogsParams

	// ------------- Optional query parameter "host" -------------

	err = runtime.BindQueryParameter("form", true, false, "host", r.URL.Query(), &params.Host)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "host", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetHttpLogs(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// RunApp operation middleware
func (siw *ServerInterfaceWrapper) RunApp(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "app" -------------
	var app string

	err = runtime.BindStyledParameterWithOptions("simple", "app", r.PathValue("app"), &app, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "app", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.RunApp(w, r, app)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{})
}

// ServeMux is an abstraction of http.ServeMux.
type ServeMux interface {
	HandleFunc(pattern string, handler func(http.ResponseWriter, *http.Request))
	ServeHTTP(w http.ResponseWriter, r *http.Request)
}

type StdHTTPServerOptions struct {
	BaseURL          string
	BaseRouter       ServeMux
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, m ServeMux) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseRouter: m,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, m ServeMux, baseURL string) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseURL:    baseURL,
		BaseRouter: m,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options StdHTTPServerOptions) http.Handler {
	m := options.BaseRouter

	if m == nil {
		m = http.NewServeMux()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	m.HandleFunc("GET "+options.BaseURL+"/v0/apps", wrapper.GetApps)
	m.HandleFunc("GET "+options.BaseURL+"/v0/apps/{app}", wrapper.GetApp)
	m.HandleFunc("GET "+options.BaseURL+"/v0/logs/console", wrapper.GetConsoleLogs)
	m.HandleFunc("GET "+options.BaseURL+"/v0/logs/cron", wrapper.GetCronLogs)
	m.HandleFunc("GET "+options.BaseURL+"/v0/logs/http", wrapper.GetHttpLogs)
	m.HandleFunc("POST "+options.BaseURL+"/v0/run/{app}", wrapper.RunApp)

	return m
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+SWzW7bMAyAX8XQdsziYL35lhVYV6DAivY45KDYtKNCElWK7hoEfveBctPGsdvur4dh",
	"Jwuk+feJJr1TJbqAHjxHVexULDfgdDouQ5BHIAxAbCAJnfamhshy5m0AVShc30DJqpsprx0cKCKT8Y0o",
	"WrIT8m6mCG5bQ1Cp4ltv3b+7mo2dn6Jz2ldfWw4tjxMrsTqMbTxDAySGkSsgmswrcoUtT6vasoQYD3Rr",
	"RAvaj/Levznrc3j0+hh5XI24ML7G5N2wFd2109Z+h3W2vDxXM3UHFA16VaiFpIMBvA5GFepkvpifqJkK",
	"mjcpvfxukesQ0rmBVI2A0WzQn1eqUGfAS9FL2jGgjz2xj4tFD84z+GSmQ7CmTIb5TZTg+4aQk2FwyfA9",
	"Qa0K9S5/ap38oW9yaZrusV5NpLd9uRXEkkzgvqYLEznDOkt5i5p1EwVmEqxEsi8r3+kQuleKSzxIO2Ag",
	"8bNTRsIII7XvS/GtDq+OqYXZQYHH7bn6Q2CvchpzOQMWJi8gsdjEvEQf0cJLUE77Vy6wiWM4w6CfjWWg",
	"TDxn623WY0r8blug7THAvwUMSwb+EJlAuyG4Gslplk/OeJ0SOI40Aned3KQaBvCS4Age9Rf1LDlC/59h",
	"wzoTKj+Fb8McXsL3hTn8Br4NRn6G34PqH+47av3TGAsYJ8hdtf5N59htC5E/YbX9pRE23LGamjjYBKOt",
	"eTT3h4symU8tw+4NB+3wtyFdEdxzHqw2R15eveur1stXnpXWTA5o+WsAuptu9+XleXadtA//OIWSLykW",
	"eb6r0GnjO9n6moxe2x5DL04nqHVrOd29mcO9dsHCvEQnaa66HwEAAP//sgt99cUJAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
